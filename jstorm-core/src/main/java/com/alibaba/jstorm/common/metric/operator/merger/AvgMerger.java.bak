/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.alibaba.jstorm.common.metric.operator.merger;

import java.util.Collection;
import java.util.concurrent.atomic.AtomicLong;

import com.alibaba.jstorm.utils.Pair;
import com.google.common.util.concurrent.AtomicDouble;

public class AvgMerger2 implements Merger<Pair<AtomicDouble, AtomicLong>> {
    private static final long serialVersionUID = -3892281208959055221L;

    @Override
    public Pair<AtomicDouble, AtomicLong> merge(
            Collection<Pair<AtomicDouble, AtomicLong>> objs,
            Pair<AtomicDouble, AtomicLong> unflushed, Object... others) {
        // TODO Auto-generated method stub
        AtomicDouble sum = new AtomicDouble(0.0);
        AtomicLong times = new AtomicLong(0);

        if (unflushed != null) {
            sum.addAndGet(unflushed.getFirst().get());
            times.addAndGet(unflushed.getSecond().get());
        }

        for (Pair<AtomicDouble, AtomicLong> item : objs) {
            if (item == null) {
                continue;
            }
            sum.addAndGet(item.getFirst().get());
            times.addAndGet(item.getSecond().get());
        }

        return new Pair<AtomicDouble, AtomicLong>(sum, times);
    }

}
