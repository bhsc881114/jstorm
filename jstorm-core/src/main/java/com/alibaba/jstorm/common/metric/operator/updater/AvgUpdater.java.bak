/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.alibaba.jstorm.common.metric.operator.updater;

import java.util.concurrent.atomic.AtomicLong;

import com.alibaba.jstorm.utils.Pair;
import com.google.common.util.concurrent.AtomicDouble;

public class AvgUpdater2 implements Updater<Pair<AtomicDouble, AtomicLong>> {
    private static final long serialVersionUID = 2562836921724586449L;

    @Override
    public Pair<AtomicDouble, AtomicLong> update(Number object,
            Pair<AtomicDouble, AtomicLong> cache, Object... others) {
        // TODO Auto-generated method stub
        if (object == null) {
            return cache;
        }
        if (cache == null) {
            cache =
                    new Pair<AtomicDouble, AtomicLong>(new AtomicDouble(0.0),
                            new AtomicLong(0));
        }

        AtomicDouble sum = cache.getFirst();
        AtomicLong times = cache.getSecond();

        sum.addAndGet(object.doubleValue());
        times.incrementAndGet();

        return cache;
    }

    @Override
    public Pair<AtomicDouble, AtomicLong> updateBatch(
            Pair<AtomicDouble, AtomicLong> object,
            Pair<AtomicDouble, AtomicLong> cache, Object... objects) {
        // TODO Auto-generated method stub
        if (object == null) {
            return cache;
        }
        if (cache == null) {
            cache =
                    new Pair<AtomicDouble, AtomicLong>(new AtomicDouble(0.0),
                            new AtomicLong(0));
        }

        AtomicDouble sum = cache.getFirst();
        AtomicLong times = cache.getSecond();

        sum.addAndGet(object.getFirst().get());
        times.addAndGet(object.getSecond().get());

        return cache;
    }

}
